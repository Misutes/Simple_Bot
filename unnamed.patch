Index: SQL.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SQL.py	(revision 723a62fd291878cae83695afcb4469d19abe5e70)
+++ SQL.py	(date 1602501445927)
@@ -1,45 +1,83 @@
 import sqlite3
 
-
-class Database:
-
-    def __init__(self):
-        self.connect = sqlite3.connect('Users_DB')
-        self.cursor = self.connect.cursor()
-
-        self.cursor.execute("""
-            CREATE TABLE IF NOT EXISTS users(
-                ID TEXT,
-                NAME_ TEXT DEFAULT 1,
-                NEW INT DEFAULT 1,
-                PAUSE INT DEFAULT 0,
-                CHALLENGE INT  DEFAULT 0,
-                LITRES INT DEFAULT 0,
-                RECOMMENDATION INT DEFAULT 0,
-                QUIZ INT DEFAULT 0
-            )
-        """)
+def create_db(cursor):
+    cursor.execute("""
+                CREATE TABLE IF NOT EXISTS users(
+                    user_id INT,
+                    name TEXT DEFAULT '',
+                    new_user INT DEFAULT 1,
+                    pause_pos INT DEFAULT 0,
+                    challange_pos INT  DEFAULT 0,
+                    litres_pos INT DEFAULT 0,
+                    recommendation_poss INT DEFAULT 0,
+                    quiz_pos INT DEFAULT 0
+                )
+            """)
 
-        self.cursor.execute("""
-            CREATE TABLE IF NOT EXISTS bag_words(
-                MAIN_MENU TEXT,
-                RECOMMENDATION TEXT,
-                LITRES TEXT
-            )
-        """)
+    cursor.execute("""
+                CREATE TABLE IF NOT EXISTS bag_words(
+                    main_menu TEXT,
+                    recommendation TEXT,
+                    litres TEXT
+                )
+            """)
 
-        self.cursor.execute("""
-                    CREATE TABLE IF NOT EXISTS quiz(
-                        ID TEXT,
-                        QUESTION INT DEFAULT 1,
-                        CORR_ANS INT DEFAULT 0,
-                        TIME_ INT DEFAULT 0
-                    )
-                """)
+    cursor.execute("""
+                        CREATE TABLE IF NOT EXISTS quiz(
+                            user_id TEXT,
+                            question INT DEFAULT 1,
+                            correct_answer INT DEFAULT 0,
+                            time INT DEFAULT 0
+                        )
+                    """)
+
+    cursor.execute("""
+                        CREATE TABLE IF NOT EXISTS logger(
+                            date,
+                            time,
+                            value_log
+                )
+            """)
+
+    cursor.execute("""
+                                CREATE TABLE IF NOT EXISTS text_message(
+                                    trigger_name,
+                                    trigger_value
+                        )
+                    """)
 
+    cursor.execute("""
+                                CREATE TABLE IF NOT EXISTS media(
+                                    media_name,
+                                    media_value
+                        )
+                    """)
+
+def change_column_name(cursor, table, columns):
+    for column in columns:
+        rename_stmt = 'ALTER TABLE {table} RENAME COLUMN {oldname} TO {newname}'.format(
+            table=table,
+            oldname=column[0],
+            newname=column[1]
+        )
+        cursor.execute(rename_stmt)
+
+if __name__ == '__main__':
+    connect = sqlite3.connect('Users_DB')
+    cursor = connect.cursor()
+    #create_db(cursor)
+    #change_column_name(cursor, table='', columns=[])
+    connect.commit()
+
+
+class Database:
+
+    def __init__(self):
+        self.connect = sqlite3.connect('Users_DB')
+        self.cursor = self.connect.cursor()
+
         # self.cursor.execute("""ALTER TABLE users ADD COLUMN QUIZ """)
 
-
     def insert_data(self, table, column, data):
         self.cursor.execute(f"SELECT {column} FROM {table} WHERE {column}='{data}'")
         if not self.cursor.fetchone():
@@ -78,17 +116,17 @@
             return False
 
 
-class Inquiry:
-
-    def __init__(self):
+class b:
+    def __init__(self, table):
         self.inquiry = ''
+        self.table = table
 
-    def _select(self, columns, defaultTable = 'user'):
+    def _select(self, columns, defaultTable='user'):
         inquiry = 'SELECT'
         for table, column in columns:
             table = table if table else defaultTable
             inquiry += ' ' + str(table) + ('.' if table else '') + str(column) + ','
-        self.inquiry = inquiry[-1] + self.inquiry
+        self.inquiry = inquiry[-1]
 
     def _from(self, tables):
         inquiry = 'FROM'
@@ -111,11 +149,19 @@
     def count(self):
         pass
 
-    def where(self):
-        pass
+    def where(self, conds):
+        stmt = 'WHERE'
+        stmt.join(conds)
+
 
-    def _eq(self):
-        pass
+class Inquiry:
+
+    def __int__(self):
+        self.inquiry = ''
+
+    @classmethod
+    def _eq(cls, val):
+        return cls
 
     def _neq(self):
         pass
@@ -126,10 +172,10 @@
     def _le(self):
         pass
 
-    def _ge(self):
+    def _gt(self):
         pass
 
-    def _le(self):
+    def _lt(self):
         pass
 
     def _and(self):
